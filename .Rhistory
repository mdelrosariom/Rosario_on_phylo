o_tree$tip.label <- new_tiplabels
plot(o_tree)
orig_tiplabels <- c("Alice", "Bob", "Cindy")
o_tree <- rtree(n = 3, tip.label = orig_tiplabels)
new_tiplabels <- c("Debbie_xgg_gg", "Elrond_y_x", "Frank_j_k")
new_tiplabels <- c("Debbie_xgg_gg", "Elrond_y_x", "Frank_j_k")
plot(o_tree)
new_tiplabels <- c("Debbie_xgg_gg", "Elrond_y_x", "Frank_j_k")
o_tree$tip.label <- new_tiplabels
plot(o_tree)
for (i in 1:length(orig_tree$tip.label)){
x = orig_tree$tip.label[i]
orig_tree$tip.label[i]<-stringr::str_extract(x, "[_]*_[^_]*")}
plot(o_tree)
plot(o_tree)
for (i in 1:length(o_tree$tip.label)){
x = o_tree$tip.label[i]
o_tree$tip.label[i]<-stringr::str_extract(x, "[_]*_[^_]*")}
plot(o_tree)
new_tiplabels <- c("Debbie_xgg_gg", "Elrond_y_x", "Frank_j_k")
o_tree$tip.label <- new_tiplabels
for (i in 1:length(o_tree$tip.label)){
x = o_tree$tip.label[i]
o_tree$tip.label[i]<-stringr::str_extract(x, "*_[^_]*")}
for (i in 1:length(o_tree$tip.label)){
x = o_tree$tip.label[i]
o_tree$tip.label[i]<-stringr::str_extract(x, "[_]*_[^_]*")}
plot(o_tree)
new_tiplabels <- c("Debbie_xgg_gg", "Elrond_y_x", "Frank_j_k")
o_tree$tip.label <- new_tiplabels
#plot(orig_tree)
plot(o_tree)
for (i in 1:length(o_tree$tip.label)){
x = o_tree$tip.label[i]
o_tree$tip.label[i]<-stringr::str_extract(x, "_[^_]*")}
#print(orig_tree)
plot(o_tree)
for (i in 1:length(o_tree$tip.label)){
x = o_tree$tip.label[i]
o_tree$tip.label[i]<-stringr::str_extract(x, "[^_]*")}
#print(orig_tree)
new_tiplabels <- c("Debbie_xgg_gg", "Elrond_y_x", "Frank_j_k")
o_tree$tip.label <- new_tiplabels
#plot(orig_tree)
for (i in 1:length(o_tree$tip.label)){
x = o_tree$tip.label[i]
o_tree$tip.label[i]<-stringr::str_extract(x, "[^_]*")}
#print(orig_tree)
plot(o_tree)
new_tiplabels <- c("Debbie_xgg_gg", "Elrond_y_x", "Frank_j_k")
o_tree$tip.label <- new_tiplabels
#plot(orig_tree)
for (i in 1:length(o_tree$tip.label)){
x = o_tree$tip.label[i]
o_tree$tip.label[i]<-stringr::str_extract(x, "[^_]")}
#print(orig_tree)
plot(o_tree)
new_tiplabels <- c("Debbie_xgg_gg", "Elrond_y_x", "Frank_j_k")
o_tree$tip.label <- new_tiplabels
#plot(orig_tree)
for (i in 1:length(o_tree$tip.label)){
x = o_tree$tip.label[i]
o_tree$tip.label[i]<-stringr::str_extract(x, "[_]*_[^_]*")}
plot(o_tree)
new_tiplabels <- c("Debbie_xgg_gg", "Elrond_y_x", "Frank_j_k")
o_tree$tip.label <- new_tiplabels
#plot(orig_tree)
for (i in 1:length(o_tree$tip.label)){
x = o_tree$tip.label[i]
o_tree$tip.label[i]<-stringr::str_extract(x, "[^_]*_[^_]*")}
#print(orig_tree)
plot(o_tree)
library("phytools") #includes ape
setwd("C:/Users/mdrmi/Downloads/Phylogenetic trees used for global analysis of island birds/Phylogenetic trees used for global analysis of island birds/Maximum clade credibility trees/")
acrocephalus_tree<-read.nexus("Acrocephalus_maxcred.tre")
birds <- acrocephalus_tree$tip.label
label_parts <- strsplit(birds, "_")
common_prefix <- sapply(label_parts, function(x) paste(x[1], x[2], sep = "_"))
common_prefix <- unique(common_prefix)
all_of_sp <- list()
for (j in 1:length(common_prefix)) {
vect <- birds[grepl(common_prefix[j], birds)]
all_of_sp <- c(all_of_sp, list(vect))
}
all_of_mono <- list()
for (i in 1:length(all_of_sp)) {
if (length(all_of_sp[[i]])>1){
all_of_mono <- append(all_of_mono, list(all_of_sp[[i]]))
}
}
to_prune <- c()
to_prune
to_inspect <- c()
for (i in 1:length(all_of_mono)) {
if (is.monophyletic(acrocephalus_tree, all_of_mono[[i]])) {
print("is mono buh")
to_prune <- c(to_prune,list(all_of_mono[[i]]) )
} else {
to_inspect <- c(to_inspect, list(all_of_mono[[i]]))
}
}
to_prube
to_prune
to_inspect
lost_case_ask_ben <- list()
lost_case_not_hope <- list()
still_hope <- list()
for (z in 1:length(to_inspect)) {
label_parts <- strsplit(as.character(to_inspect[[z]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
if (length(common_prefix) == length(unique(common_prefix))) {
lost_case_ask_ben <- c(lost_case_ask_ben, list(to_inspect[[z]]))
} else {
still_hope <- to_inspect[[z]][grepl(common_prefix[z], to_inspect[[z]])]
for (t in 1:length(still_hope)) {
if (is.monophyletic(acrocephalus_tree, still_hope[[t]])) {
to_prune <- c(to_prune, list(still_hope[[t]]))
} else {
lost_case_not_hope <- c(lost_case_not_hope, list(still_hope[[t]]))
}
}
}
}
lost_case_ask_ben
lost_case_ask_ben <- list()
lost_case_not_hope <- list()
still_hope <- list()
for (z in 1:length(to_inspect)) {
label_parts <- strsplit(as.character(to_inspect[[z]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
if (length(common_prefix) == length(unique(common_prefix))) {
lost_case_ask_ben <- c(lost_case_ask_ben, list(to_inspect[[z]]))
} else {
still_hope <- to_inspect[[z]][grepl(common_prefix[z], to_inspect[[z]])]
for (t in 1:length(still_hope)) {
if (is.monophyletic(acrocephalus_tree, still_hope[[t]])) {
to_prune <- c(to_prune, list(still_hope[[t]]))
} else {
lost_case_ask_ben <- c(lost_case_ask_ben, list(still_hope[[t]]))
}
}
}
}
lost_case_ask_ben
to_prube
to_prune
62+18
all_of_mono
to_prune
library("phytools") #includes ape
setwd("C:/Users/mdrmi/Downloads/Phylogenetic trees used for global analysis of island birds/Phylogenetic trees used for global analysis of island birds/Maximum clade credibility trees/")
acrocephalus_tree<-read.nexus("Acrocephalus_maxcred.tre")
birds <- acrocephalus_tree$tip.label
label_parts <- strsplit(birds, "_")
common_prefix <- sapply(label_parts, function(x) paste(x[1], x[2], sep = "_"))
common_prefix <- unique(common_prefix)
all_of_sp <- list()
for (j in 1:length(common_prefix)) {
vect <- birds[grepl(common_prefix[j], birds)]
all_of_sp <- c(all_of_sp, list(vect))
}
all_of_mono <- list()
for (i in 1:length(all_of_sp)) {
if (length(all_of_sp[[i]])>1){
all_of_mono <- append(all_of_mono, list(all_of_sp[[i]]))
}
}
to_prune <- c()
to_inspect <- c()
for (i in 1:length(all_of_mono)) {
if (is.monophyletic(acrocephalus_tree, all_of_mono[[i]])) {
to_prune <- c(to_prune,list(all_of_mono[[i]]) )
} else {
to_inspect <- c(to_inspect, list(all_of_mono[[i]]))
}
}
lost_case_ask_ben <- list()
lost_case_not_hope <- list()
still_hope <- list()
for (z in 1:length(to_inspect)) {
label_parts <- strsplit(as.character(to_inspect[[z]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
if (length(common_prefix) == length(unique(common_prefix))) {
lost_case_ask_ben <- c(lost_case_ask_ben, list(to_inspect[[z]]))
} else {
still_hope <- to_inspect[[z]][grepl(common_prefix[z], to_inspect[[z]])]
for (t in 1:length(still_hope)) {
if (is.monophyletic(acrocephalus_tree, still_hope[[t]])) {
to_prune <- c(to_prune, list(still_hope[[t]]))
} else {
lost_case_ask_ben <- c(lost_case_ask_ben, list(still_hope[[t]]))
}
}
}
}
for (i in 1:length(all_of_mono)) {
library("phytools") #includes ape
setwd("C:/Users/mdrmi/Downloads/Phylogenetic trees used for global analysis of island birds/Phylogenetic trees used for global analysis of island birds/Maximum clade credibility trees/")
acrocephalus_tree<-read.nexus("Acrocephalus_maxcred.tre")
birds <- acrocephalus_tree$tip.label
label_parts <- strsplit(birds, "_")
common_prefix <- sapply(label_parts, function(x) paste(x[1], x[2], sep = "_"))
library("phytools") #includes ape
setwd("C:/Users/mdrmi/Downloads/Phylogenetic trees used for global analysis of island birds/Phylogenetic trees used for global analysis of island birds/Maximum clade credibility trees/")
acrocephalus_tree<-read.nexus("Acrocephalus_maxcred.tre")
birds <- acrocephalus_tree$tip.label
label_parts <- strsplit(birds, "_")
common_prefix <- sapply(label_parts, function(x) paste(x[1], x[2], sep = "_"))
common_prefix <- unique(common_prefix)
all_of_sp <- list()
for (j in 1:length(common_prefix)) {
vect <- birds[grepl(common_prefix[j], birds)]
all_of_sp <- c(all_of_sp, list(vect))
}
all_of_mono <- list()
for (i in 1:length(all_of_sp)) {
if (length(all_of_sp[[i]])>1){
all_of_mono <- append(all_of_mono, list(all_of_sp[[i]]))
}
}
length(all_of_mono)
to_prune <- c()
to_inspect <- c()
for (i in 1:length(all_of_mono)) {
if (is.monophyletic(acrocephalus_tree, all_of_mono[[i]])) {
to_prune <- c(to_prune,list(all_of_mono[[i]]) )
} else {
to_inspect <- c(to_inspect, list(all_of_mono[[i]]))
}
}
to_prune
length(to_inspect)
#to inspect 11, to prune 30
lost_case_ask_ben <- list()
still_hope <- list()
for (z in 1:length(to_inspect)) {
label_parts <- strsplit(as.character(to_inspect[[z]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
if (length(common_prefix) == length(unique(common_prefix))) {
lost_case_ask_ben <- c(lost_case_ask_ben, list(to_inspect[[z]]))
} else {
still_hope <- to_inspect[[z]][grepl(common_prefix[z], to_inspect[[z]])]
for (t in 1:length(still_hope)) {
if (is.monophyletic(acrocephalus_tree, still_hope[[t]])) {
to_prune <- c(to_prune, list(still_hope[[t]]))
} else {
lost_case_ask_ben <- c(lost_case_ask_ben, list(still_hope[[t]]))
}
}
}
}
length(lost_case_ask_ben)
for (z in 1:length(to_inspect)) {
label_parts <- strsplit(as.character(to_inspect[[z]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
print(common_prefix)
if (length(common_prefix) == length(unique(common_prefix))) {
lost_case_ask_ben <- c(lost_case_ask_ben, list(to_inspect[[z]]))
} else {
still_hope <- to_inspect[[z]][grepl(common_prefix[z], to_inspect[[z]])]
for (t in 1:length(still_hope)) {
if (is.monophyletic(acrocephalus_tree, still_hope[[t]])) {
to_prune <- c(to_prune, list(still_hope[[t]]))
} else {
lost_case_ask_ben <- c(lost_case_ask_ben, list(still_hope[[t]]))
}
}
}
}
for (z in 1:length(to_inspect)) {
label_parts <- strsplit(as.character(to_inspect[[z]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
if (length(common_prefix) == length(unique(common_prefix))) {
print(to_inspect[[z]])
lost_case_ask_ben <- c(lost_case_ask_ben, list(to_inspect[[z]]))
} else {
still_hope <- to_inspect[[z]][grepl(common_prefix[z], to_inspect[[z]])]
for (t in 1:length(still_hope)) {
if (is.monophyletic(acrocephalus_tree, still_hope[[t]])) {
to_prune <- c(to_prune, list(still_hope[[t]]))
} else {
lost_case_ask_ben <- c(lost_case_ask_ben, list(still_hope[[t]]))
}
}
}
}
#to inspect 11, to prune 30, to now good.
lost_case_ask_ben <- list()
lost_case_not_hope <- list()
still_hope <- list()
lost_case_ask_ben <- list()
to_prune_2 <- list()
#to inspect 11, to prune 30, to now good.
lost_case_ask_ben <- list()
lost_case_not_hope <- list()
still_hope <- list()
lost_case_ask_ben_2 <- list()
to_prune_2 <- list()
for (z in 1:length(to_inspect)) {
label_parts <- strsplit(as.character(to_inspect[[z]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
if (length(common_prefix) == length(unique(common_prefix))) {
print(to_inspect[[z]])
lost_case_ask_ben <- c(lost_case_ask_ben, list(to_inspect[[z]]))
} else {
still_hope <- to_inspect[[z]][grepl(common_prefix[z], to_inspect[[z]])]
for (t in 1:length(still_hope)) {
if (is.monophyletic(acrocephalus_tree, still_hope[[t]])) {
to_prune_2 <- c(to_prune, list(still_hope[[t]]))
} else {
lost_case_ask_ben_2 <- c(lost_case_ask_ben, list(still_hope[[t]]))
}
}
}
}
lost_case_ask_ben
print(still_hope)
#to inspect 11, to prune 30, to now good.
lost_case_ask_ben <- list()
lost_case_not_hope <- list()
still_hope <- list()
lost_case_ask_ben_2 <- list()
to_prune_2 <- list()
for (z in 1:length(to_inspect)) {
label_parts <- strsplit(as.character(to_inspect[[z]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
if (length(common_prefix) == length(unique(common_prefix))) {
print(to_inspect[[z]])
lost_case_ask_ben <- c(lost_case_ask_ben, list(to_inspect[[z]]))
} else {
still_hope <- c(lost_case_ask_ben, list(to_inspect[[z]]))}}
still_hope
lost_case_ask_ben
to_inspect
lost_case_ask_ben <- list()
still_hope <- list()
for (z in 1:length(to_inspect)) {
label_parts <- strsplit(as.character(to_inspect[[z]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
if (length(common_prefix) == length(unique(common_prefix))) {
lost_case_ask_ben <- c(lost_case_ask_ben, list(to_inspect[[z]]))
} else {
still_hope <- c(still_hope, list(to_inspect[[z]]))
}
}
lost_case_ask_ben
still_hope
still_hope
for (f in 1: still_hope)   {
still_hope <- still_hope[[f]][grepl(common_prefix[f], still_hope[[f]])]
print(still_hope)
}
for (f in 1: length(still_hope))   {
still_hope <- still_hope[[f]][grepl(common_prefix[f], still_hope[[f]])]
print(still_hope)
}
for (f in 1:length(still_hope)) {
filtered_elements <- still_hope[[f]][grepl(common_prefix[f], still_hope[[f]])]
filtered_still_hope <- c(filtered_still_hope, list(filtered_elements))
print(filtered_elements)
}
filtered_still_hope <- list()
for (f in 1:length(still_hope)) {
filtered_elements <- still_hope[[f]][grepl(common_prefix[f], still_hope[[f]])]
filtered_still_hope <- c(filtered_still_hope, list(filtered_elements))
print(filtered_elements)
}
for (f in 1:length(still_hope)) {
label_parts <- strsplit(as.character(still_hope[[z]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
filtered_elements <- still_hope[[f]][grepl(common_prefix[f], still_hope[[f]])]
filtered_still_hope <- c(filtered_still_hope, list(filtered_elements))
print(filtered_elements)
}
for (f in 1:length(still_hope)) {
label_parts <- strsplit(as.character(still_hope[[f]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
filtered_elements <- still_hope[[f]][grepl(common_prefix[f], still_hope[[f]])]
filtered_still_hope <- c(filtered_still_hope, list(filtered_elements))
print(filtered_elements)
}
for (f in 1:length(still_hope)) {
label_parts <- strsplit(as.character(still_hope[[f]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
filtered_elements <- still_hope[[f]][grepl(common_prefix[f], still_hope[[f]])]
filtered_still_hope <- c(filtered_still_hope, list(filtered_elements))
print(filtered_elements)
}
filtered_still_hope <- list()
for (f in 1:length(still_hope)) {
label_parts <- strsplit(as.character(still_hope[[f]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
filtered_elements <- still_hope[[f]][grepl(common_prefix[1], still_hope[[f]])]
filtered_still_hope <- c(filtered_still_hope, list(filtered_elements))
print(filtered_elements)
}
still_hope
library("phytools") #includes ape
setwd("C:/Users/mdrmi/Downloads/Phylogenetic trees used for global analysis of island birds/Phylogenetic trees used for global analysis of island birds/Maximum clade credibility trees/")
acrocephalus_tree<-read.nexus("Acrocephalus_maxcred.tre")
birds <- acrocephalus_tree$tip.label
label_parts <- strsplit(birds, "_")
common_prefix <- sapply(label_parts, function(x) paste(x[1], x[2], sep = "_"))
common_prefix <- unique(common_prefix)
all_of_sp <- list()
for (j in 1:length(common_prefix)) {
vect <- birds[grepl(common_prefix[j], birds)]
all_of_sp <- c(all_of_sp, list(vect))
}
all_of_mono <- list()
for (i in 1:length(all_of_sp)) {
if (length(all_of_sp[[i]])>1){
all_of_mono <- append(all_of_mono, list(all_of_sp[[i]]))
}
}
to_prune <- c()
to_inspect <- c()
for (i in 1:length(all_of_mono)) {
if (is.monophyletic(acrocephalus_tree, all_of_mono[[i]])) {
to_prune <- c(to_prune,list(all_of_mono[[i]]) )
} else {
to_inspect <- c(to_inspect, list(all_of_mono[[i]]))
}
}
#to inspect 11, to prune 30, to now good.
lost_case_ask_ben <- list()
lost_case_not_hope <- list()
still_hope <- list()
lost_case_ask_ben_2 <- list()
still_hope <- list()
lost_case_ask_ben <- list()
still_hope <- list()
for (z in 1:length(to_inspect)) {
label_parts <- strsplit(as.character(to_inspect[[z]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
if (length(common_prefix) == length(unique(common_prefix))) {
lost_case_ask_ben <- c(lost_case_ask_ben, list(to_inspect[[z]]))
} else {
still_hope <- c(still_hope, list(to_inspect[[z]]))
}
}
filtered_still_hope <- list()
for (f in 1:length(still_hope)) {
label_parts <- strsplit(as.character(still_hope[[f]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
filtered_elements <- still_hope[[f]][grepl(common_prefix[1], still_hope[[f]])]
filtered_still_hope <- c(filtered_still_hope, list(filtered_elements))
print(filtered_elements)
}
still_hope <- to_inspect[[z]][grepl(common_prefix[z], to_inspect[[z]])]
for (t in 1:length(still_hope)) {
to_prune_2 <- c(to_prune, list(still_hope[[t]]))
} else {
still_hope
library("phytools") #includes ape
setwd("C:/Users/mdrmi/Downloads/Phylogenetic trees used for global analysis of island birds/Phylogenetic trees used for global analysis of island birds/Maximum clade credibility trees/")
acrocephalus_tree<-read.nexus("Acrocephalus_maxcred.tre")
birds <- acrocephalus_tree$tip.label
label_parts <- strsplit(birds, "_")
common_prefix <- sapply(label_parts, function(x) paste(x[1], x[2], sep = "_"))
common_prefix <- unique(common_prefix)
all_of_sp <- list()
for (j in 1:length(common_prefix)) {
vect <- birds[grepl(common_prefix[j], birds)]
all_of_sp <- c(all_of_sp, list(vect))
}
all_of_mono <- list()
for (i in 1:length(all_of_sp)) {
if (length(all_of_sp[[i]])>1){
all_of_mono <- append(all_of_mono, list(all_of_sp[[i]]))
}
}
to_prune <- c()
to_inspect <- c()
for (i in 1:length(all_of_mono)) {
if (is.monophyletic(acrocephalus_tree, all_of_mono[[i]])) {
to_prune <- c(to_prune,list(all_of_mono[[i]]) )
} else {
to_inspect <- c(to_inspect, list(all_of_mono[[i]]))
}
}
#to inspect 11, to prune 30, to now good.
lost_case_ask_ben <- list()
still_hope <- list()
lost_case_ask_ben <- list()
still_hope <- list()
for (z in 1:length(to_inspect)) {
label_parts <- strsplit(as.character(to_inspect[[z]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
if (length(common_prefix) == length(unique(common_prefix))) {
lost_case_ask_ben <- c(lost_case_ask_ben, list(to_inspect[[z]]))
} else {
still_hope <- c(still_hope, list(to_inspect[[z]]))
}
}
filtered_still_hope <- list()
for (f in 1:length(still_hope)) {
label_parts <- strsplit(as.character(still_hope[[f]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
filtered_elements <- still_hope[[f]][grepl(common_prefix[1], still_hope[[f]])]
filtered_still_hope <- c(filtered_still_hope, list(filtered_elements))
}
filtered_elements
still_hope
for (f in 1:length(still_hope)) {
label_parts <- strsplit(as.character(still_hope[[f]]), "_")
common_prefix <- sapply(label_parts, function(x) paste(x[3], sep = "_"))
filtered_elements <- still_hope[[f]][grepl(common_prefix[1], still_hope[[f]])]
print(filtered_elements)
filtered_still_hope <- c(filtered_still_hope, list(filtered_elements))
}
still_hope
